package main

import (
	"bytes"
	"crypto/rand"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
)

var propogate = []string{"X-Request-Id", "X-B3-Traceid", "X-B3-Spanid", "X-B3-ParentSpanid", "X-B3-Sampled"}

func main() {
	gin.DefaultWriter = os.Stdout
	log.Printf("Starting metrics-handler, propogating %d headers", len(propogate))
	fmt.Printf("making go happy %s", bytes.NewBuffer([]byte("")))
    r := gin.Default()
{{ with .Methods }}
{{ range . }} {{ if eq .Method "GET" }}   r.GET("{{ .Path }}", {{ printf "%s%s" .Method (replace .Path "/" "") }}) 
{{ else if eq .Method "POST" }}   r.POST("{{ .Path }}", {{ printf "%s%s" .Method (replace .Path "/" "") }}){{ end }}
{{ end -}}
{{ end }}

	r.Run(":8080")
}

{{ with .Methods }}
{{ range . }}
func {{ printf "%s%s" .Method (replace .Path "/" "") }}(c *gin.Context) {
    var data []byte
    {{ if .Calls }}
    var req *http.Request
    var err error
    var client *http.Client
    {{ end -}}
    {{ with .Calls }}
    {{ range . }}
    data = make([]byte, {{ .Size }})
    rand.Read(data)
    client = &http.Client{}
    req, err = http.NewRequest("{{ .Method }}", "http://{{ .Name }}:8080{{ .Path }}", bytes.NewBuffer(data))
    if err != nil {
        panic(err)
    }
    for _, v := range propogate {
		if val, ok := c.Request.Header[v]; ok {
			req.Header[v] = val
		}
	}
    req.Header.Set("Content-Length", fmt.Sprintf("%d", len(data)))
    _, err = client.Do(req)
    if err != nil {
        panic(err)
    }
    {{ end }}
    {{ end }}
    data = make([]byte, {{ .ReturnSize }})
    rand.Read(data)
    c.Data(http.StatusOK, "application/octet-stream", data)
}
{{ end -}}
{{ end -}}
